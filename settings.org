* Basic Configuration for Emacs
** Variable Initializer
#+BEGIN_SRC emacs-lisp
(use-package "startup"
  :ensure nil
  :config (setq inhibit-startup-screen t)
          (setq inhibit-startup-message t)
          ;; Display this instead of "For information about GNU Emacs and the
          ;; GNU system, type C-h C-a.". This has been made intentionally hard
          ;; to customize in GNU Emacs so I have to resort to hackery.
          (defun display-startup-echo-area-message ()
            "If it wasn't for this you'd be GNU/Spammed by now"
            (message ""))

          ;; Don't insert instructions in the *scratch* buffer
          ;; (setq initial-scratch-message nil)
          ;; (setq initial-buffer-choice "~/")
)
;; (kill-buffer "*scratch*")

(add-to-list 'default-frame-alist '(fullscreen . maximized))

(setq package-check-signature nil)

;; load emacs 24's package system. Add MELPA repository.
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
   'package-archives
   '("melpa" . "http://stable.melpa.org/packages/") ; many packages won't show if using stable
   ;; '("melpa" . "http://melpa.milkbox.net/packages/")
   t))
#+END_SRC

** Custom Variables
#+BEGIN_SRC emacs-lisp
(defconst sys/win32p
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst sys/linuxp
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst sys/macp
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst sys/mac-x-p
  (and (display-graphic-p) sys/macp)
  "Are we running under X on a Mac system?")

(defconst sys/mac-cocoa-p
  (featurep 'cocoa)
  "Are we running with Cocoa on a Mac system?")

(defconst sys/linux-x-p
  (and (display-graphic-p) sys/linuxp)
  "Are we running under X on a GNU/Linux system?")

(defconst sys/cygwinp
  (eq system-type 'cygwin)
  "Are we running on a Cygwin system?")

(defconst sys/rootp
  (string-equal "root" (getenv "USER"))
  "Are you using ROOT user?")

(defconst emacs/>=25p
  (>= emacs-major-version 25)
  "Emacs is 25 or above.")

(defconst emacs/>=26p
  (>= emacs-major-version 26)
  "Emacs is 26 or above.")

(defconst emacs/>=27p
  (>= emacs-major-version 27)
  "Emacs is 27 or above.")

(defconst emacs/>=25.3p
  (or emacs/>=26p
      (and (= emacs-major-version 25) (>= emacs-minor-version 3)))
  "Emacs is 25.3 or above.")

(defconst emacs/>=25.2p
  (or emacs/>=26p
      (and (= emacs-major-version 25) (>= emacs-minor-version 2)))
  "Emacs is 25.2 or above.")
(add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp"))

#+END_SRC
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 110)

(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(set-default 'truncate-lines t)
(column-number-mode 1)
(global-display-line-numbers-mode t)
(progn
  ;; make indentation commands use space only (never tab character)
  (setq-default indent-tabs-mode nil)
  ;; emacs 23.1 to 26, default to t
  ;; if indent-tabs-mode is t, it means it may use tab, resulting mixed space and tab
  )
;; set default tab char's display width to 4 spaces
(setq-default tab-width 4) ; emacs 23.1 to 26 default to 8
(setq-default line-spacing 2)
(global-unset-key [(control z)])
(global-unset-key [(control x)(control z)])
#+END_SRC

** Tab widh
#+BEGIN_SRC emacs-lisp
(setq tab-width 4)
#+END_SRC

** Backup
#+BEGIN_SRC emacs-lisp
(setq backup-inhibited t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Don't want any backup files nor autosaving
(setq make-backup-files        nil)
(setq auto-save-list-file-name nil)
(setq auto-save-default        nil)
#+END_SRC
** Scrolling experience
#+BEGIN_SRC emacs-lisp
(setq scroll-margin 0
          scroll-conservatively 10000
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; increase line space for better readability
(setq-default line-spacing 2)
#+END_SRC
* UI
#+BEGIN_SRC emacs-lisp
(require 'init-ui)
#+END_SRC
* Edit
#+BEGIN_SRC emacs-lisp
(require 'init-edit)
#+END_SRC
* Highlight
#+BEGIN_SRC emacs-lisp
(require 'init-highlight)
#+END_SRC
* ORG mode configuration
#+BEGIN_SRC emacs-lisp
(require 'init-org)
#+END_SRC

# ** Org-mode bullets
#+BEGIN_SRC emacs-lisp
(use-package org
  :hook ((org-mode . visual-line-mode)
         (org-mode . org-indent-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+END_SRC

* Themes
** Doom themes
#+BEGIN_SRC emacs-lisp
    (use-package doom-themes
  :ensure t
  :config (load-theme 'doom-gruvbox t))
#+END_SRC
** Syntax highlights
*** dockerfile mode
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :ensure t)
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+END_SRC

*** docker-compose mode
#+BEGIN_SRC emacs-lisp
(use-package docker-compose-mode
  :ensure t)
#+END_SRC

* Ivy/Ivy-frame/Swiper/Ivy-posframe
#+BEGIN_SRC emacs-lisp
(require 'init-ivy)
#+END_SRC
* Tabs: Centaur-tabs
#+BEGIN_SRC emacs-lisp
(require 'init-tabs)
#+END_SRC
* Navigation
** Selection behaviour
Replace the active region just by typing text, just like modern editors
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :ensure t
    :config (delete-selection-mode +1))
#+END_SRC
** Scroll
#+BEGIN_SRC emacs-lisp
;; scroll one line at a time (less "jumpy" than defaults)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
#+END_SRC

** keybindings
*** Delete full line *ctrl+d*
#+BEGIN_SRC emacs-lisp
;; keybinding to delete full line
(global-set-key (kbd "C-d") 'kill-whole-line)
#+END_SRC
*** Comment line *ctrl+7*
#+BEGIN_SRC emacs-lisp
;; keybinding to comment out line
(global-set-key (kbd "C-7") 'comment-line)
#+END_SRC
*** Undo and redo
#+BEGIN_SRC emacs-lisp
;; (global-unset-key (kbd "C-z"))
(global-set-key [(control z)] 'undo)
#+END_SRC
*** Move between panes
#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings 'meta)
#+END_SRC

* Programming language
** Python-mode
#+BEGIN_SRC emacs-lisp
(require 'init-python)
#+END_SRC
* Treemacs
#+BEGIN_SRC emacs-lisp
(require 'init-treemacs)
#+END_SRC
* Miscellaneous
** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
#+END_SRC
** Dired tweaks
Delete intermediate buffers when navigating through dired.
#+BEGIN_SRC emacs-lips
(use-package dired
  :ensure nil
  :config
  (setq delete-by-moving-to-trash t)
  (eval-after-load "dired"
    #'(lambda ()
        (put 'dired-find-alternate-file 'disabled nil)
        (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+END_SRC
** Fill column indicator
#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :ensure t)
(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
  (global-fci-mode 1)
(setq fci-rule-column 80)
#+END_SRC
** Programming language support and utilities
*** Company for auto-completion
Use ~C-n~ and ~C-p~ to navigate the tooltip.
#+BEGIN_SRC emacs-lisp
;; (use-package company
;;   :diminish company-mode
;;   :hook (prog-mode . company-mode)
;;   :config
;;   (setq company-minimum-prefix-length 1
;;         company-idle-delay 0.1
;;         company-selection-wrap-around t
;;         company-tooltip-align-annotations t
;;         company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
;;                             company-echo-metadata-frontend))
;;   (with-eval-after-load 'company
;;     (define-key company-active-map (kbd "C-n") 'company-select-next)
;;     (define-key company-active-map (kbd "C-p") 'company-select-previous)))
#+END_SRC
*** Flycheck
A modern on-the-fly syntax checking extension -- absolute essential
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config (global-flycheck-mode))
;;  (use-package flycheck :config (global-flycheck-mode +1))
#+END_SRC
#+BEGIN_SRC emacs-lisp
;; (use-package flycheck
;;   :config
;;     ;; (setq flycheck-global-modes '(python-mode))
;;     ;; (gloabal-flycheck-mode)
;;     (add-hook 'after-init-hook #'global-flycheck-mode)
;;     ;; (spc-map
;;     ;;     "i" '(nill :which-key "flycheck prefix")
;;     ;;     "in" 'flycheck-next-erro
;;     ;;     "ip" 'flycheck-previous-error
;;     ;;     "il" 'flycheck-list-errors)
;;   :diminish flycheck-mode
;;   :ensure t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  ;; :diminish
  ;; :hook (after-init . global-flycheck-mode)
  :config
    (global-flycheck-mode)
  ;; (setq flycheck-emacs-lisp-load-path 'inherit)

  ;; Only check while saving and opening files
  (setq flycheck-check-syntax-automatically '(save mode-enabled))

  ;; Set fringe style
  ;; (setq flycheck-indication-mode 'right-fringe)
  (when (fboundp 'define-fringe-bitmap)
    (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
      [16 48 112 240 112 48 16] nil nil 'center))

  ;; Display Flycheck errors in GUI tooltips
  (if (display-graphic-p)
      (if emacs/>=26p
          (use-package flycheck-posframe
            :custom-face (flycheck-posframe-border-face ((t (:inherit default))))
            :hook (flycheck-mode . flycheck-posframe-mode)
            :init (setq flycheck-posframe-border-width 1
                        flycheck-posframe-inhibit-functions
                        '((lambda (&rest _) (bound-and-true-p company-backend)))))
        (use-package flycheck-pos-tip
          :defines flycheck-pos-tip-timeout
          :hook (global-flycheck-mode . flycheck-pos-tip-mode)
          :config (setq flycheck-pos-tip-timeout 30)))
    (use-package flycheck-popup-tip
      :hook (flycheck-mode . flycheck-popup-tip-mode))))
#+END_SRC
*** Yasnippet & yasnippet-snippets
Use TAB to expand snippets. The code snippet below also avoids clashing with company-mode.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer 1
    :diminish yas-minor-mode
    :config (yas-global-mode))
  (use-package yasnippet-snippets
    :config
    (yasnippet-snippets-initialize)
    (yas-global-mode +1)
    (advice-add 'company-complete-common
                :before
                (lambda ()
                  (setq my-company-point (point))))
    (advice-add 'company-complete-common
                :after
                (lambda ()
                  (when (equal my-company-point (point))
                    (yas-expand)))))
#+END_SRC
*** Useful major modes
Markdown mode and JSON mode
#+BEGIN_SRC emacs-lisp
  ;; (use-package markdown-mode :hook (markdown-mode . visual-line-mode))
  (use-package markdown-mode
    :init
    :config
    (setq markdown-xhtml-header-content "<meta http-equiv='Content-Type' content='text/html; charset=utf-8' />")
    :mode "\\.md\\'"
    :ensure t)

  (use-package json-mode
    :mode "\\.json\\'"
    :ensure t)
#+END_SRC
*** Yafolding
#+BEGIN_SRC emacs-lisp
(use-package yafolding
  :ensure t
  :hook (prog-mode . yafolding-mode))
;; (add-hook 'prog-mode-hook 'yasfolding-mode)
(defvar yafolding-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "<C-S-return>") #'yafolding-hide-parent-element)
    (define-key map (kbd "<C-M-return>") #'yafolding-toggle-all)
    (define-key map (kbd "<C-return>") #'yafolding-toggle-element)
    map))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :diminish magit-mode)
#+END_SRC
** Wucuo spell check
#+BEGIN_SRC emacs-lisp
(use-package wucuo
  :ensure t)
;; (add-hook 'prog-mode-hook #'wucuo-start)
;; (add-hook 'text-mode-hook #'wucuo-start)
#+END_SRC
* Evil-Mode
#+BEGIN_SRC emacs-lisp
;; Download Evil
(unless (package-installed-p 'evil)
  (package-install 'evil))

;; Enable Evil
(require 'evil)
(evil-mode 1)
#+END_SRC
